#!/usr/bin/python3

import os
import json
import re
import sys
import argparse

# Global option to enable or disable debugging
DEBUG = True
COPY_MODE = False
DEFAULT_AUDIOBOOKS_DIR = "/Audiobooks"

def debug_log(message):
    if DEBUG:
        print(f"[DEBUG] {message}")

def extract_book_info_from_dirname(dirname):
    match = re.search(r'(bk|book)[_\s]*(\d+(\.\d+)?)', dirname, re.IGNORECASE)
    if match:
        debug_log(f"Found book number {match.group(2)} in directory name '{dirname}'")
        return float(match.group(2))
    return None

def extract_book_info_from_series(series):
    match = re.search(r'(.+?)\s*#\s*(\d+(\.\d+)?)', series)
    if match:
        cleaned_series = match.group(1).strip()
        book_number = float(match.group(2))
        debug_log(f"Extracted book number {book_number} from series '{series}', cleaned series name is '{cleaned_series}'")
        return book_number, cleaned_series
    return None, series

def process_metadata(metadata_path):
    debug_log(f"Processing metadata file '{metadata_path}'")
    with open(metadata_path, 'r') as f:
        metadata = json.load(f)
    title = metadata.get('title', '').replace('_', ' ')
    authors = metadata.get('authors', [])
    series = metadata.get('series', [])
    book_number = extract_book_info_from_dirname(title)
    debug_log(f"Metadata extracted: title='{title}', authors='{authors}', series='{series}', book_number='{book_number}'")
    return {
        'title': title,
        'authors': authors,
        'series': series,
        'book_number': book_number,
    }

def generate_bash_commands(base_dir, audiobooks_dir):
    commands = []
    created_dirs = set()
    
    debug_log(f"Walking through the directory '{base_dir}'")
    for root, dirs, files in os.walk(base_dir):
        if 'metadata.json' in files:
            metadata_path = os.path.join(root, 'metadata.json')
            book_info = process_metadata(metadata_path)
            
            if not book_info['authors']:
                debug_log(f"Skipping directory '{root}' as it lacks author information")
                continue
            
            author = book_info['authors'][0]
            series = book_info['series'][0] if book_info['series'] else ""
            book_number = book_info['book_number']
            
            if book_number is None:
                book_number = extract_book_info_from_dirname(root)
            
            if book_number is None and series:
                book_number, series = extract_book_info_from_series(series)
            
            if book_number is not None and series:
                tmp = series.split("#", 1)
                series = tmp[0].strip()
                book_dir = f"{audiobooks_dir}/{author}/{series}/{series} - {book_number}"
            else:
                title = book_info['title']
                book_dir = f"{audiobooks_dir}/{author}/{title}"
            
            if root != book_dir:
                if book_dir not in created_dirs:
                    commands.append(f"mkdir -p '{book_dir}'")
                    created_dirs.add(book_dir)

            if root != book_dir:
                if COPY_MODE:
                    commands.append(f"cp -r '{root}'/* '{book_dir}/'")
                    debug_log(f"Generated commands to copy '{root}' to '{book_dir}'")
                else:
                    commands.append(f"mv '{root}'/* '{book_dir}/'")
                    debug_log(f"Generated commands to move '{root}' to '{book_dir}'")

    return commands

def main(base_dir, audiobooks_dir):
    commands = generate_bash_commands(base_dir, audiobooks_dir)
    for command in commands:
        print(command)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Move or copy audiobook files to organized directories.')
    parser.add_argument('base_dir', help='The base directory to search for audiobooks.')
    parser.add_argument('-c', '--copy', action='store_true', help='Copy files instead of moving them.')
    parser.add_argument('--debug', action='store_true', help='Enable debug logging.')
    parser.add_argument('-t', '--top-level-dir', default=DEFAULT_AUDIOBOOKS_DIR, help='Top level directory for audiobooks.')

    args = parser.parse_args()

    base_dir = args.base_dir
    audiobooks_dir = args.top_level_dir
    COPY_MODE = args.copy
    DEBUG = args.debug

    main(base_dir, audiobooks_dir)
